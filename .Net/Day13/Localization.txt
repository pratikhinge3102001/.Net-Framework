Localization: Adapting an application to different cultures and languages.

Steps for Localization:

Enable Localization Middleware:

In Program.cs:

app.UseRequestLocalization();

Configure Supported Cultures and UI Culture:

Set supported cultures and default UI culture:

services.Configure<RequestLocalizationOptions>(options =>
{
    options.DefaultRequestCulture = new RequestCulture("en-US");
    options.SupportedCultures = new List<CultureInfo> {
        new CultureInfo("en-US"),
        new CultureInfo("fr-FR"),
        // ... other cultures
    };
    options.SupportedUICultures = new List<CultureInfo> {
        new CultureInfo("en-US"),
        new CultureInfo("fr-FR"),
        // ... other UI cultures
    };
});

Manage Culture and UI Culture:

Access and change culture in controllers and views:
var culture = HttpContext.Features.Get<IRequestCultureFeature>()?.RequestCulture;
// ... use culture for formatting, resource lookup, etc.

Create Resource Files:

Store localized strings and content in resource files (.resx) for each culture.
Access resources using IStringLocalizer.
Display Localized Content:

Use IHtmlLocalizer in views to render localized text and elements.
Handle Culture Changes:

Implement mechanisms for users to change cultures (e.g., language selectors).